一,基础

	1,一个 Vue 应用由一个通过 new Vue 创建的根 Vue 实例，以及可选的嵌套的、可复用的组件树组成

	2,export :一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。


二,组件
	1,要创建一个组件，只需调用 Vue.extend() 来生成一个 Vue 的子类构造函数
	#创建组件
	var ComponentWithDefaultData = Vue.extend({
	  data: function () {
	    return {
	      title: 'Hello!'
	    }
	  }
	})
	#注册组件（Vue.component() 会为你隐式调用 Vue.extend()）
	#Vue.component('my-component', {
	  template: '<p>A custom component!</p>'
	})

	/**************务必在初始化根实例之前注册组件***************************/

	2,传递数据
	从父级组件获取数据：
	组件有独立作用域。这意味着你无法在子组件的模板中引用父级的数据。为了传递数据到拥有独立作用域的子组件中，我们需要用到 props

		<!-- 默认情况下，单向绑定 -->
	<child msg="{{parentMsg}}"></child>
	<!-- 显式双向绑定 -->
	<child msg="{{@ parentMsg}}"></child>
	<!-- 显示一次性绑定 -->
	<child msg="{{* parentMsg}}"></child>

双向绑定会反向同步子级的 msg 属性到父级的 parentMsg 属性。一次性绑定在完成之后不会在父级和子级之间同步未来发生的变化。

v-model,双向绑定


v-bind 缩写
<!-- 完整语法 -->
<a v-bind:href="url">...</a>

<!-- 缩写 -->
<a :href="url">...</a>
v-on 缩写
<!-- 完整语法 -->
<a v-on:click="doSomething">...</a>

<!-- 缩写 -->
<a @click="doSomething">...</a>